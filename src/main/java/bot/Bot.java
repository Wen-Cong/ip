package bot;

import bot.command.Command;
import bot.service.FileService;
import bot.task.TaskList;
import bot.util.Parser;

import java.io.IOException;

/**
 * Main class for the bot application that manages tasks and user interactions.
 * This class orchestrates the entire application flow, handling user input,
 * command execution, and data persistence.
 */
public class Bot {
    /** Name of the bot */
    private final String name;

    /** List of tasks **/
    private TaskList taskList;

    /** File service API that write and read from file **/
    private final FileService fileService;

    /**
     * Constructs a Bot instance with the specified name and storage path.
     * Initializes the user interface, file services, and loads existing tasks
     * from the storage file if available.
     *
     * @param name the name of the bot to be displayed to users
     * @param storagePath the file path where task data will be stored
     */
    public Bot(String name, String storagePath) {
        this.name = name;
        this.fileService = new FileService(storagePath);

        try {
            this.taskList = new TaskList(fileService.readFromFile());
        } catch (IOException | IllegalArgumentException e) {
            taskList = new TaskList();
        }
    }

    /**
     * Processes user input, executes the corresponding command, and returns a response.
     * This method parses the input string into a {@link Command}, executes it, and
     * returns the resulting message. If the command is an exit command, it
     * terminates the application.
     *
     * @param input The raw input string from the user.
     * @return The response message generated by the executed command.
     */
    public String generateResponse(String input) {
        // Parse user input into Command object
        Command command = Parser.parse(input);

        command.execute(taskList, fileService);

        if (command.isExit()) {
            System.exit(0);
        }

        return command.getResponse();
    }

    /**
     * Generates the initial greeting message from the bot.
     *
     * @return A string containing the bot's name and a welcome message.
     */
    public String getGreetingMessage() {
        return "Hello! I'm " + name + "\n What can I do for you?";
    }
}
